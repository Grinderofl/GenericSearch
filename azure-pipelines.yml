trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
jobs:
- job: Build
  pool:
    vmImage: 'windows-latest'
  variables:
    cake.buildTarget: 'CI'
    build.configuration: 'Release'
    cake.verbosity: 'Verbose'
    build: $[counter(variables['major'], 1)]
    branch: $(variables['Build.SourceBranch'])

  steps:
  - checkout: self
    clean: true
  
  # - powershell: $Env:SourceBranch = $(variables['Build.SourceBranch'])
  #   displayName: 'Set branch name'

  # - powershell: $Env:Build = "$(build)"
  #   displayName: 'Set build number'

  - powershell: |
      $commit=(git rev-list HEAD --count)
      Write-Host '##vso[task.setvariable variable=commit]$commit'
    displayName: 'Set commit number'

  - powershell: ./build.ps1 -Target "$(cake.buildTarget)" -Configuration "$(build.configuration)" -Verbosity "$(cake.verbosity)"
    displayName: 'Cake Build'
    env:
      SourceBranch: $(Build.SourceBranch)
      Build: $(build)
      commit: $(commit)

  - powershell: Write-Host '##vso[build.addbuildtag]PR'
    displayName: 'Mark as PR Build'
    condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

  - powershell: Write-Host '##vso[build.addbuildtag]Preview'
    displayName: 'Mark as Preview  Build'
    condition: |
      and
      (
        succeeded(),
        startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'),
        contains(variables['Build.SourceBranch'], '-preview')
      )

  - powershell: git tag $(variables['ReleaseBranch.Tag'])
    displayName: 'Tag release branch'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))

  - powershell: Write-Host '##vso[build.addbuildtag]Release'
    displayName: 'Mark as Release Build'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
