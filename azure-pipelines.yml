name:
trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
jobs:
- job: Build
  pool:
    vmImage: 'windows-latest'
  variables:
    cake.buildTarget: 'CI'
    build.configuration: 'Release'
    cake.verbosity: 'Diagnostic'
    #build: $[counter(variables['major'], 1)]
    #branch: $(variables['Build.SourceBranch'])
    #buildId: $(variables['Build.BuildId'])
    #hash: $(variables['Build.SourceVersion'])

  steps:
  - checkout: self
    persistCredentials: true
    clean: true

  - powershell: |
      Write-Host 'A test right here'

      $SourceBranch='$(Build.SourceBranch)'
      $BuildId='$(Build.BuildNumber)'
      $Hash='$(Build.SourceVersion)'

      Write-Host "SourceBranch = $SourceBranch"
      Write-Host "BuildId = $BuildId"
      Write-Host "Hash = $Hash"

      Write-Host "##vso[task.setvariable variable=SourceBranch]$SourceBranch"
      Write-Host "##vso[task.setvariable variable=BuildId]$BuildId"
      Write-Host "##vso[task.setvariable variable=Hash]$Hash"
    displayName: 'Set build variables'

  - powershell: ./build.ps1 -Target "$(cake.buildTarget)" -Configuration "$(build.configuration)" -Verbosity "$(cake.verbosity)"
    displayName: 'Cake Build'
    env:
      SourceBranch: $(SourceBranch)
      #Build: $(build)
      BuildId: $(BuildId)
      Hash: $(Hash)

  - powershell: Write-Host '##vso[build.addbuildtag]PR'
    displayName: 'Mark as PR Build'
    condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))

  - powershell: Write-Host '##vso[build.addbuildtag]Preview'
    displayName: 'Mark as Preview  Build'
    condition: |
      and
      (
        succeeded(),
        startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'),
        contains(variables['Build.SourceBranch'], '-preview')
      )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      $envTag = "$(Build.BuildNumber)"
      Write-Host "Env Tag = $envTag"
      $tag = "v" + $envTag.Substring(0, $envTag.lastIndexOf('.'))
      Write-Host "Release Tag = $tag"
      git tag $tag
      git tag
      git push --tags
    displayName: 'Tag release branch'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    #ignoreLASTEXITCODE: false
    #failOnStderr: false

  - powershell: Write-Host '##vso[build.addbuildtag]Release'
    displayName: 'Mark as Release Build'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
